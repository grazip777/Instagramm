import signal  # –î–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–∏–≥–Ω–∞–ª–∞–º–∏ SIGINT
from multiprocessing import Process
from django.core.management.base import BaseCommand
from report.telegram_bot import bot
import psutil
import sys

# –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
TERMINATE = False


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
def start_bot():
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    try:
        bot.polling(timeout=10, long_polling_timeout=5, non_stop=True)
        print("[INFO]: –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
    except Exception as e:
        print(f"[ERROR]: –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")


# –ö–æ–º–∞–Ω–¥–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø—É—Å–∫–æ–º –±–æ—Ç–∞ –∏ —Å–µ—Ä–≤–µ—Ä–∞ Django
class Command(BaseCommand):
    help = "–ó–∞–ø—É—Å–∫–∞–µ—Ç Telegram-–±–æ—Ç –∏ —Å–µ—Ä–≤–µ—Ä Django –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ."
    bot_process = None  # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞

    def handle(self, *args, **options):
        global TERMINATE  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–π —Ñ–ª–∞–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        self.stdout.write("[INFO]: –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç –∏ —Å–µ—Ä–≤–µ—Ä Django...")

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ SIGINT
        signal.signal(signal.SIGINT, self.terminate_processes)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –±–æ—Ç–∞
        if not self.is_bot_running():
            self.bot_process = Process(target=start_bot, daemon=True)
            self.bot_process.start()
            self.stdout.write("[INFO]: –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! ü§ñ")
        else:
            self.stdout.write("[INFO]: –ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø—É—Å–∫.")

        # –ó–∞–ø—É—Å–∫ Django-—Å–µ—Ä–≤–µ—Ä–∞
        from django.core.management.commands.runserver import Command as RunserverCommand
        runserver = RunserverCommand()

        try:
            runserver.run_from_argv(["manage.py", "runserver", "--noreload", "127.0.0.1:8000"])
        except KeyboardInterrupt:
            # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞
            self.terminate_processes(None, None)
            TERMINATE = True

        if TERMINATE:
            sys.exit(0)

    def is_bot_running(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–∏ –±–æ—Ç, –ø–æ –∏–º–µ–Ω–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∏ —Å–∏–≥–Ω–∞—Ç—É—Ä–µ cmdline."""
        for process in psutil.process_iter(attrs=["pid", "name", "cmdline"]):
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ Python, —Å–≤—è–∑–∞–Ω–Ω–æ–≥–æ —Å –±–æ—Ç–æ–º
                cmdline = process.info["cmdline"]
                if (
                        cmdline
                        and "python" in process.info["name"]  # –ü—Ä–æ—Ü–µ—Å—Å—ã Python
                        and any("start_bot" in arg for arg in cmdline)  # –°–∏–≥–Ω–∞—Ç—É—Ä–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
                ):
                    return True  # –ü—Ä–æ—Ü–µ—Å—Å –±–æ—Ç–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω
            except (psutil.NoSuchProcess, psutil.AccessDenied):
                continue
        return False  # –ü—Ä–æ—Ü–µ—Å—Å–∞ –±–æ—Ç–∞ –Ω–µ—Ç

    def terminate_processes(self, signum, frame):
        """–ó–∞–≤–µ—Ä—à–∞–µ–º –±–æ—Ç –∏ —Å–µ—Ä–≤–µ—Ä –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ SIGINT (CTRL+C)."""
        self.stdout.write("\n[INFO]: –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã...")
        global TERMINATE
        TERMINATE = True

        # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –±–æ—Ç–∞, –µ—Å–ª–∏ –æ–Ω –∞–∫—Ç–∏–≤–µ–Ω
        if self.bot_process and self.bot_process.is_alive():
            self.stdout.write("[INFO]: –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –±–æ—Ç–∞...")
            self.bot_process.terminate()
            self.bot_process.join()  # –ñ–¥—ë–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –±–æ—Ç–∞

        self.stdout.write("[INFO]: –í—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã. –í—ã—Ö–æ–¥.")
        sys.exit(0)
